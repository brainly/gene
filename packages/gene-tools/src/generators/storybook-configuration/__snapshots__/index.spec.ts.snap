// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`storybookConfiguration generator application should add storybook targets to the project configuration 1`] = `
Object {
  "configurations": Object {
    "ci": Object {
      "quiet": true,
    },
  },
  "dependsOn": Array [
    Object {
      "projects": "self",
      "target": "copy-storybook-images",
    },
    Object {
      "projects": "self",
      "target": "copy-storybook-translations",
    },
  ],
  "executor": "@nx/storybook:storybook",
  "options": Object {
    "config": Object {
      "configFolder": "apps/my-app1/.storybook",
    },
    "configDir": "apps/my-app1/.storybook",
    "port": 4400,
  },
}
`;

exports[`storybookConfiguration generator application should add storybook targets to the project configuration 2`] = `
Object {
  "configurations": Object {
    "ci": Object {
      "quiet": true,
    },
  },
  "dependsOn": Array [
    Object {
      "projects": "self",
      "target": "copy-storybook-images",
    },
    Object {
      "projects": "self",
      "target": "copy-storybook-translations",
    },
  ],
  "executor": "@nx/storybook:build",
  "options": Object {
    "config": Object {
      "configFolder": "apps/my-app1/.storybook",
    },
    "outputPath": "dist/storybook/my-app1",
  },
  "outputs": Array [
    "{options.outputPath}",
  ],
}
`;

exports[`storybookConfiguration generator application should generate configuration files when .storybook folder exists without any files inside 1`] = `
"const rootMain = require('../../../.storybook/main');
rootMain.addons.push('@storybook/addon-essentials');

module.exports = {
  ...rootMain,
  staticDirs: ['../public', '../../../.storybook/assets'],
  stories: [
    '../components/**/*.stories.mdx',
    '../components/**/*.stories.@(js|jsx|ts|tsx)',
  ],

  webpackFinal: async (config, { configType }) => {
    // apply any global webpack configs that might have been specified in .storybook/main.js
    if (rootMain.webpackFinal) {
      config = await rootMain.webpackFinal(config, { configType });
    }

    // add your own webpack tweaks if needed

    return config;
  },
};
"
`;

exports[`storybookConfiguration generator application should generate configuration files when .storybook folder exists without any files inside 2`] = `
"import '../../../.storybook/manager';
"
`;

exports[`storybookConfiguration generator application should generate configuration files when .storybook folder exists without any files inside 3`] = `
"import { workerPath } from '../../../.storybook/preview';
import { initialize } from 'msw-storybook-addon';
const { use } = initialize({
  serviceWorker: {
    url: workerPath,
  },
});

export { use };

export { decorators, parameters } from '../../../.storybook/preview';
"
`;

exports[`storybookConfiguration generator application should generate configuration files when .storybook folder exists without any files inside 4`] = `
"{
  \\"extends\\": \\"./tsconfig.json\\",
  \\"compilerOptions\\": {
    \\"emitDecoratorMetadata\\": true,
    \\"experimentalDecorators\\": true,
    \\"outDir\\": \\"\\",
    \\"strict\\": true,
    \\"strictNullChecks\\": true,
    \\"noUncheckedIndexedAccess\\": true,
    \\"noFallthroughCasesInSwitch\\": true,
    \\"forceConsistentCasingInFileNames\\": true
  },
  \\"exclude\\": [
    \\"src/**/*.spec.ts\\",
    \\"src/**/*.spec.js\\",
    \\"src/**/*.spec.tsx\\",
    \\"src/**/*.spec.jsx\\"
  ],
  \\"include\\": [
    \\"**/*.stories.ts\\",
    \\"**/*.stories.js\\",
    \\"**/*.stories.jsx\\",
    \\"**/*.stories.tsx\\",
    \\".storybook/*.js\\"
  ]
}
"
`;

exports[`storybookConfiguration generator application should generate the .storybook folder with the configuration files 1`] = `
"const rootMain = require('../../../.storybook/main');
rootMain.addons.push('@storybook/addon-essentials');

module.exports = {
  ...rootMain,
  staticDirs: ['../public', '../../../.storybook/assets'],
  stories: [
    '../components/**/*.stories.mdx',
    '../components/**/*.stories.@(js|jsx|ts|tsx)',
  ],

  webpackFinal: async (config, { configType }) => {
    // apply any global webpack configs that might have been specified in .storybook/main.js
    if (rootMain.webpackFinal) {
      config = await rootMain.webpackFinal(config, { configType });
    }

    // add your own webpack tweaks if needed

    return config;
  },
};
"
`;

exports[`storybookConfiguration generator application should generate the .storybook folder with the configuration files 2`] = `
"import '../../../.storybook/manager';
"
`;

exports[`storybookConfiguration generator application should generate the .storybook folder with the configuration files 3`] = `
"import { workerPath } from '../../../.storybook/preview';
import { initialize } from 'msw-storybook-addon';
const { use } = initialize({
  serviceWorker: {
    url: workerPath,
  },
});

export { use };

export { decorators, parameters } from '../../../.storybook/preview';
"
`;

exports[`storybookConfiguration generator application should generate the .storybook folder with the configuration files 4`] = `
"{
  \\"extends\\": \\"./tsconfig.json\\",
  \\"compilerOptions\\": {
    \\"emitDecoratorMetadata\\": true,
    \\"experimentalDecorators\\": true,
    \\"outDir\\": \\"\\",
    \\"strict\\": true,
    \\"strictNullChecks\\": true,
    \\"noUncheckedIndexedAccess\\": true,
    \\"noFallthroughCasesInSwitch\\": true,
    \\"forceConsistentCasingInFileNames\\": true
  },
  \\"exclude\\": [
    \\"src/**/*.spec.ts\\",
    \\"src/**/*.spec.js\\",
    \\"src/**/*.spec.tsx\\",
    \\"src/**/*.spec.jsx\\"
  ],
  \\"include\\": [
    \\"**/*.stories.ts\\",
    \\"**/*.stories.js\\",
    \\"**/*.stories.jsx\\",
    \\"**/*.stories.tsx\\",
    \\".storybook/*.js\\"
  ]
}
"
`;

exports[`storybookConfiguration generator library should add storybook targets to the project configuration 1`] = `
Object {
  "configurations": Object {
    "ci": Object {
      "quiet": true,
    },
  },
  "dependsOn": Array [
    Object {
      "projects": "self",
      "target": "copy-storybook-images",
    },
    Object {
      "projects": "self",
      "target": "copy-storybook-translations",
    },
  ],
  "executor": "@nx/storybook:storybook",
  "options": Object {
    "config": Object {
      "configFolder": "libs/my-lib1/.storybook",
    },
    "configDir": "libs/my-lib1/.storybook",
    "port": 4400,
  },
}
`;

exports[`storybookConfiguration generator library should add storybook targets to the project configuration 2`] = `
Object {
  "configurations": Object {
    "ci": Object {
      "quiet": true,
    },
  },
  "dependsOn": Array [
    Object {
      "projects": "self",
      "target": "copy-storybook-images",
    },
    Object {
      "projects": "self",
      "target": "copy-storybook-translations",
    },
  ],
  "executor": "@nx/storybook:build",
  "options": Object {
    "config": Object {
      "configFolder": "libs/my-lib1/.storybook",
    },
    "outputPath": "dist/storybook/my-lib1",
  },
  "outputs": Array [
    "{options.outputPath}",
  ],
}
`;

exports[`storybookConfiguration generator library should generate the .storybook folder with the configuration files 1`] = `
"const rootMain = require('../../../.storybook/main');
rootMain.addons.push('@storybook/addon-essentials');

module.exports = {
  ...rootMain,
  staticDirs: ['../../../.storybook/assets'],
  stories: ['../src/**/*.stories.mdx', '../src/**/*.stories.@(js|jsx|ts|tsx)'],

  webpackFinal: async (config, { configType }) => {
    // apply any global webpack configs that might have been specified in .storybook/main.js
    if (rootMain.webpackFinal) {
      config = await rootMain.webpackFinal(config, { configType });
    }

    // add your own webpack tweaks if needed

    return config;
  },
};
"
`;

exports[`storybookConfiguration generator library should generate the .storybook folder with the configuration files 2`] = `
"import '../../../.storybook/manager';
"
`;

exports[`storybookConfiguration generator library should generate the .storybook folder with the configuration files 3`] = `
"import { workerPath } from '../../../.storybook/preview';
import { initialize } from 'msw-storybook-addon';
const { use } = initialize({
  serviceWorker: {
    url: workerPath,
  },
});

export { use };

export { decorators, parameters } from '../../../.storybook/preview';
"
`;

exports[`storybookConfiguration generator library should generate the .storybook folder with the configuration files 4`] = `
"{
  \\"extends\\": \\"./tsconfig.json\\",
  \\"compilerOptions\\": {
    \\"emitDecoratorMetadata\\": true,
    \\"experimentalDecorators\\": true,
    \\"outDir\\": \\"\\",
    \\"strict\\": true,
    \\"strictNullChecks\\": true,
    \\"noUncheckedIndexedAccess\\": true,
    \\"noFallthroughCasesInSwitch\\": true,
    \\"forceConsistentCasingInFileNames\\": true
  },
  \\"exclude\\": [
    \\"src/**/*.spec.ts\\",
    \\"src/**/*.spec.js\\",
    \\"src/**/*.spec.tsx\\",
    \\"src/**/*.spec.jsx\\"
  ],
  \\"include\\": [
    \\"**/*.stories.ts\\",
    \\"**/*.stories.js\\",
    \\"**/*.stories.jsx\\",
    \\"**/*.stories.tsx\\",
    \\".storybook/*.js\\"
  ]
}
"
`;
