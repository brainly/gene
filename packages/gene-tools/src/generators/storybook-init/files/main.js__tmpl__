const {join} = require('path');
const TsconfigPathsPlugin = require('tsconfig-paths-webpack-plugin');

module.exports = {
  framework: '@storybook/nextjs',

  core: {
    builder: 'webpack5',
    disableTelemetry: true, // enabled by default: https://storybook.js.org/docs/configure/telemetry#how-to-opt-out
  },

  addons: [
    '@storybook/addon-knobs',
    '@storybook/addon-actions',
    '@storybook/addon-backgrounds',
    '@storybook/addon-viewport',
    '@storybook/addon-storysource',
    join(__dirname, './events'),
    '@storybook/addon-links',
  ],

  previewHead: head => `
    ${head}
    <link href="brainly-style-guide/css/style-guide.css" rel="stylesheet"/>
    <script src="brainly-style-guide/images/icons.js" defer></script>
    <script src="brainly-style-guide/images/subjects-icons.js" defer></script>
    <script src="brainly-style-guide/images/subjects-mono-icons.js" defer></script>
    <script src="brainly-style-guide/images/math-symbols-icons.js" defer></script>
    <script src="brainly-style-guide/images/mobile-icons.js" defer></script>
    <script>
      window.jsData = {
        styleGuideAssets: {
          logo: {
            big: 'brainly-style-guide/images/logos/brainly-5c4a769505.svg',
            plus:
              'brainly-style-guide/images/logos/brainly-plus-0768e10846.svg',
            small:
              'brainly-style-guide/images/logos/brainly-mobile-6879551770.svg',
          },
        },
      };
    </script>
  `,

  managerHead: head => `
    ${head}
    <link rel="icon" type="image/x-icon" href="brainly-style-guide/images/favicons/brainly/favicon.ico">
    <link rel="icon" sizes="192x192" href="brainly-style-guide/images/favicons/brainly/favicon-hd.png">
    <meta name="theme-color" content="#ffffff">
  `,

  env: config => ({
    ...config,
    NEXT_PUBLIC_ENV: 'local',
  }),

  webpackFinal: async config => {
    const rules = config.module.rules
      // removes default file-loader
      .filter(rule => !rule.loader || !rule.loader.includes('file-loader'))
      // removes default svg loader
      .filter(rule => !rule.test?.toString().includes('svg'));

    // taken from: https://github.com/webpack-contrib/sass-loader/issues/867#issuecomment-1208342094
    // to make sass work
    const scssConfigIndex = config.module.rules.findIndex(c =>
      '.scss'.match(c.test)
    );
    if (scssConfigIndex > 0 && config.module.rules[scssConfigIndex]?.oneOf) {
      config.module.rules[scssConfigIndex].oneOf.push({
        test: /\.(css|s(a|c)ss)$/,
        use: ['style-loader', 'css-loader', 'sass-loader'],
      });
    } else {
      config.module.rules.push({
        test: /\.(css|s(a|c)ss)$/,
        use: ['style-loader', 'css-loader', 'sass-loader'],
      });
    }

    const tsPaths = new TsconfigPathsPlugin({
      configFile: './tsconfig.base.json',
    });

    return {
      ...config,
      node: {
        __dirname: true,
        __filename: true,
      },
      resolve: {
        ...config.resolve,
        extensions: ['.mjs', '.ts', '.tsx', '.js', '.jsx'],
        plugins: [...(config.resolve.plugins ?? []), tsPaths],
        fallback: {
          ...(config.resolve || {}).fallback,
          fs: false,
          stream: false,
          os: false,
          zlib: false
        },
      },
      module: {
        ...config.module,
        rules: [
          {
            test: /\.tsx?$/,
            exclude: /node_modules/,
            loader: 'ts-loader',
            options: {
              transpileOnly: true,
            },
            enforce: 'pre',
          },
          ...rules,
          {
            test: /\.svg$/,
            exclude: /node_modules/,
            use: 'svg-inline-loader/?classPrefix=_[hash:4]__',
          },
          {
            test: /\.(jpe?g|png|gif)$/i,
            use: [
              {
                loader: 'file-loader',
                options: {
                  name: '[name].[hash:8].[ext]',
                },
              },
            ],
            type: 'javascript/auto',
          },
          {
            test: /\.mjs$/,
            include: /node_modules/,
            type: 'javascript/auto',
          },
        ],
      },
    };
  },

  docs: {
    autodocs: true,
  },
};
