const { join } = require('path');
const TsconfigPathsPlugin = require('tsconfig-paths-webpack-plugin');

module.exports = {
  framework: {
    name: '@storybook/nextjs',
    options: {builder: {useSWC: true}},
  },

  typescript: {
    reactDocgen: 'react-docgen',
  },


  core: {
    builder: 'webpack5',
    disableTelemetry: true, // enabled by default: https://storybook.js.org/docs/configure/telemetry#how-to-opt-out
  },

  addons: [
    '@storybook/addon-knobs',
    '@storybook/addon-actions',
    '@storybook/addon-backgrounds',
    '@storybook/addon-viewport',
    '@storybook/addon-storysource',
    join(__dirname, './events'),
    '@storybook/addon-links',
  ],

  previewHead: (head) => `
    ${head}
    <link href="brainly-style-guide/css/style-guide.css" rel="stylesheet"/>
    <script src="brainly-style-guide/images/icons.js" defer></script>
    <script src="brainly-style-guide/images/subjects-icons.js" defer></script>
    <script src="brainly-style-guide/images/subjects-mono-icons.js" defer></script>
    <script src="brainly-style-guide/images/math-symbols-icons.js" defer></script>
    <script src="brainly-style-guide/images/mobile-icons.js" defer></script>
    <script>
      window.jsData = {
        styleGuideAssets: {
          logo: {
            big: 'brainly-style-guide/images/logos/brainly-5c4a769505.svg',
            plus:
              'brainly-style-guide/images/logos/brainly-plus-0768e10846.svg',
            small:
              'brainly-style-guide/images/logos/brainly-mobile-6879551770.svg',
          },
        },
      };
    </script>
  `,

  managerHead: (head) => `
    ${head}
    <link rel="icon" type="image/x-icon" href="brainly-style-guide/images/favicons/brainly/favicon.ico">
    <link rel="icon" sizes="192x192" href="brainly-style-guide/images/favicons/brainly/favicon-hd.png">
    <meta name="theme-color" content="#ffffff">
  `,

  env: (config) => ({
    ...config,
    NEXT_PUBLIC_ENV: 'local',
  }),

  webpackFinal: async (config) => {
    // Filter out the default SCSS rule from Storybook's webpack config
    const rules = config.module.rules.filter(
      (rule) => rule.test?.toString().indexOf('scss') === -1
    );

    // Add our own custom SCSS rule with the correct css-loader options
    rules.push({
      test: /\.scss$/,
      use: [
        'style-loader',
        {
          loader: 'css-loader',
          options: {
            import: true, // required for css-loader v6+
            url: true, // required for css-loader v6+
            modules: {
              auto: true,
              localIdentName: '[name]__[local]--[hash:base64:5]',
            },
          },
        },
        'sass-loader',
      ],
    });

    config.module.rules = rules;

    // Add tsconfig-paths-webpack-plugin to resolve path aliases
    config.resolve.plugins = [
      new TsconfigPathsPlugin({
        configFile: './tsconfig.base.json',
      }),
    ];

    // Add fallbacks for node built-ins
    config.resolve.fallback = {
      ...(config.resolve.fallback || {}),
      net: false,
      dns: false,
      tls: false,
      fs: false,
      crypto: false,
      stream: false,
      zlib: false,
    };

    return config;
  },

  docs: {
    autodocs: true,
  },
};
