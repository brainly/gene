import {
  transformReactQueryResponse,
  useInjectedReactQueryClient,
  reactQueryFetchWrapper,
} from '@brainly-gene/core';
import type {QueryClient, QueryFunctionContext} from '@tanstack/react-query';
import {useQuery} from '@tanstack/react-query';
import nodeFetch from 'node-fetch';

// TODO: Replace with actual types from your API
export type <%= fileName %>APIType = {
  id: string;
  // Add your specific return type properties here
};

// Change this to match input of your API
export type VariablesType = {
  yourVariable?: string;
};

export const get<%= fileName %>QueryKey = (variables?: VariablesType) => [
  'get-<%= lowerCaseFileName %>-key',
  variables,
];

export function defaultQueryFn(
  variables: VariablesType,
  context?: QueryFunctionContext
) {
  const url = `/your-url/<%= kebabCaseFileName %>?<%= kebabCaseFileName %>Ids=${variables.id}`;
  const fetchMethod = typeof window === 'undefined' ? nodeFetch : fetch;
  return reactQueryFetchWrapper<<%= fileName %>APIType>(() => fetchMethod(url));
}

// Use this function to run this query on SSR, pass the subapp as queryFn
export async function query<%= fileName %>(
  client: QueryClient,
  variables: VariablesType,
  queryFn = defaultQueryFn
) {
  return client.fetchQuery({
    queryFn: () => queryFn(variables),
    queryKey: get<%= fileName %>QueryKey(variables),
  });
}

export function use<%= fileName %>(
  props: {variables: VariablesType; refetchInterval?: number},
  skip = false
) {
  const queryClient = useInjectedReactQueryClient();

  // useInfiniteQuery if paging is needed
  const result = useQuery(
    {
      queryKey: get<%= fileName %>QueryKey(props.variables),
      queryFn: ctx => defaultQueryFn(props.variables, ctx),
      enabled: !skip,
      refetchInterval: props.refetchInterval || false,
    },
    queryClient
  );

  return transformReactQueryResponse(result);
}
