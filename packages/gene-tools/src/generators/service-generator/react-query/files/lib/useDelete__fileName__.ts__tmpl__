import {
  useInjectedReactQueryClient,
  useReactQueryLazy,
  reactQueryFetchWrapper,
} from '@brainly-gene/core';

import type {QueryClient} from '@tanstack/react-query';
import nodeFetch from 'node-fetch';
import type {<%= fileName %>sAPIType} from './use<%= fileName %>s';
import {get<%= fileName %>sQueryKey} from './use<%= fileName %>s';

export type Delete<%= fileName %>APIType = {
  id: string;
};

export type VariablesType = {
  id: string;
};

export const queryKey = (variables?: VariablesType) => [
  'delete-<%= lowerCaseFileName %>-key',
  variables,
];

export async function defaultQueryFn(
  variables: VariablesType,
  queryClient: QueryClient
) {
  const url = `/your-url/<%= kebabCaseFileName %>/${variables.id}`;
  const fetchMethod = typeof window === 'undefined' ? nodeFetch : fetch;
  const deleteResult = await reactQueryFetchWrapper<Delete<%= fileName %>APIType>(() =>
    fetchMethod(url, {
      method: 'DELETE',
    })
  );

  queryClient.setQueryData<<%= fileName %>sAPIType>(
    get<%= fileName %>sQueryKey({
      <%= lowerCaseFileName %>Ids: [],
    }),
    current => {
      if (!current || !current.data) {
        return current;
      }

      return {
        status: 200,
        success: true,
        data: current.data?.filter(<%= lowerCaseFileName %> => <%= lowerCaseFileName %>.id !== variables.id),
      };
    }
  );

  return deleteResult;
}

export function useDelete<%= fileName %>() {
  const queryClient = useInjectedReactQueryClient();

  return useReactQueryLazy<Delete<%= fileName %>APIType, VariablesType>({
    reactQueryClient: queryClient,
    queryFn: (_client, variables) => defaultQueryFn(variables, queryClient),
    queryKey,
  });
}
