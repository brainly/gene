import {
  useInjectedReactQueryClient,
  useReactQueryLazy,
  reactQueryFetchWrapper,
} from '@brainly-gene/core';

import type {QueryFunctionContext} from '@tanstack/react-query';
import nodeFetch from 'node-fetch';

// TODO: Replace with actual types from your API
export type Create<%= fileName %>APIType = {
  id: string;
  // Add your specific return type properties here
};

export type VariablesType = {
  // Add your specific input properties here
  // Remove 'yourVariable' and add actual properties
  [key: string]: unknown;
};

export const queryKey = (variables?: VariablesType) => [
  'create-<%= lowerCaseFileName %>-key',
  variables,
];

export function defaultQueryFn(
  variables: VariablesType,
  context?: QueryFunctionContext
) {
  const url = '/your-url/<%= kebabCaseFileName %>';
  const fetchMethod = typeof window === 'undefined' ? nodeFetch : fetch;
  return reactQueryFetchWrapper<Create<%= fileName %>APIType>(() =>
    fetchMethod(url, {
      method: 'POST',
      body: JSON.stringify({
        ...variables,
      }),
      headers: {
        'Content-type': 'application/json; charset=UTF-8',
      },
    })
  );
}

export function useCreate<%= fileName %>() {
  const queryClient = useInjectedReactQueryClient();

  return useReactQueryLazy<Create<%= fileName %>APIType, VariablesType>({
    reactQueryClient: queryClient,
    queryFn: (_client, variables) => defaultQueryFn(variables),
    queryKey,
  });
}
