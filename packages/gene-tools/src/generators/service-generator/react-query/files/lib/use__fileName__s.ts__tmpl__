import {
  transformReactQueryResponse,
  useInjectedReactQueryClient,
  reactQueryFetchWrapper,
} from '@brainly-gene/core';
import type {QueryClient, QueryFunctionContext} from '@tanstack/react-query';
import {useQuery} from '@tanstack/react-query';
import nodeFetch from 'node-fetch';

// TODO: Replace with actual types from your API
export type <%= fileName %>sAPIType = {
  data: Array<{
    id: string;
    // Add your specific item type properties here
  }>;
  // Add pagination or other metadata properties here
};

export type VariablesType = {
  <%= fileName %>Ids: string[];
};

export const get<%= fileName %>sQueryKey = (variables?: VariablesType) => [
  'get-<%= fileName %>s-key',
  variables,
];

export function defaultQueryFn(
  variables: VariablesType,
  context?: QueryFunctionContext
) {
  const params = new URLSearchParams();
  const url = `/your-url/<%= kebabCaseFileName %>${params.toString() ? `?${params}` : ''}`;
  const fetchMethod = typeof window === 'undefined' ? nodeFetch : fetch;

  return reactQueryFetchWrapper<<%= fileName %>sAPIType>(() => fetchMethod(url));
}

// Use this function to run this query on SSR, pass the subapp as queryFn
export async function query<%= fileName %>s(
  client: QueryClient,
  variables: VariablesType,
  queryFn = defaultQueryFn
) {
  return client.fetchQuery({
    queryFn: () => queryFn(variables),
    queryKey: get<%= fileName %>sQueryKey(variables),
  });
}

export function use<%= fileName %>s(props: {variables: VariablesType}, skip = false) {
  const queryClient = useInjectedReactQueryClient();

  // useInfiniteQuery if paging is needed
  const result = useQuery(
    {
      queryKey: get<%= fileName %>sQueryKey(props.variables),
      queryFn: ctx => defaultQueryFn(props.variables, ctx),
      enabled: !skip,
    },
    queryClient
  );

  return transformReactQueryResponse(result);
}
