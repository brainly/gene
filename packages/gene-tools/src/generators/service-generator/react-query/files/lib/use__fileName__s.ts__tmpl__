import {
  transformReactQueryResponse,
  useInjectedReactQueryClient,
} from '@brainly-gene/core';

import {QueryClient, QueryFunctionContext, useQuery} from '@tanstack/react-query';
import {
  reactQueryFetchWrapper,
} from '@brainly-gene/core';
import nodeFetch from 'node-fetch';

// Change this to match output of your API
export type <%= fileName %>sAPIType = {
  id: number,
  userId: number,
  title: string,
  body: string,
}[];

// Change this to match input of your API
export type VariablesType = {
  userId: number
};

export const queryKey = (variables?: VariablesType) => [
  'get-<%= lowerCaseFileName %>s-key',
  variables,
];

export function defaultQueryFn(variables: VariablesType, context?: QueryFunctionContext) {
  const url = `https://jsonplaceholder.typicode.com/posts?userId=${variables.userId}`;
  const fetchMethod = typeof window === 'undefined' ? nodeFetch : fetch;
  return reactQueryFetchWrapper<<%= fileName %>sAPIType>(() =>
    fetchMethod(url)
  );
}

// Use this function to run this query on SSR, pass the subapp as queryFn
export async function query<%= fileName %>s(client: QueryClient, variables: VariablesType, queryFn = defaultQueryFn) {
  return client.fetchQuery({
    queryFn: () => queryFn(variables),
    queryKey: queryKey(variables),
  });
}

export function use<%= fileName %>s(props: {variables: VariablesType}) {
  const queryClient = useInjectedReactQueryClient();

  // useInfiniteQuery if paging is needed
  const result = useQuery(
    {
      queryKey: queryKey(props.variables),
      queryFn: (ctx) => defaultQueryFn(props.variables, ctx),
    },
    queryClient
  );

  return transformReactQueryResponse(result);
}
