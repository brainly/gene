import {
  useInjectedReactQueryClient,
  useReactQueryLazy,
  reactQueryFetchWrapper,
} from '@brainly-gene/core';
import type {
  <%= fileName %>UpdateInputBody,
  <%= fileName %>PostResultBody,
} from '@brainly/<%= library %>/api';

import type {QueryClient} from '@tanstack/react-query';
import nodeFetch from 'node-fetch';
import {get<%= fileName %>QueryKey} from './use<%= fileName %>';

export type Update<%= fileName %>APIType = <%= fileName %>PostResultBody;

export type VariablesType = Omit<<%= fileName %>UpdateInputBody, 'yourVariable'>;

export const queryKey = (variables?: VariablesType) => [
  'update-<%= lowerCaseFileName %>-key',
  variables,
];

export async function defaultQueryFn(
  variables: VariablesType,
  client: QueryClient
) {
  const url = `/your-url/<%= lowerCaseFileName %>/${variables.id}`;
  const fetchMethod = typeof window === 'undefined' ? nodeFetch : fetch;
  const result = await reactQueryFetchWrapper<Update<%= fileName %>APIType>(() =>
    fetchMethod(url, {
      method: 'PATCH',
      body: JSON.stringify({
        ...variables,
      }),
      headers: {
        'Content-type': 'application/json; charset=UTF-8',
      },
    })
  );

  client.removeQueries({
    queryKey: get<%= fileName %>QueryKey({id: variables.id}),
  });
  return result;
}

export function useUpdate<%= fileName %>() {
  const queryClient = useInjectedReactQueryClient();

  return useReactQueryLazy<Update<%= fileName %>APIType, VariablesType>({
    reactQueryClient: queryClient,
    queryFn: (_client, variables) => defaultQueryFn(variables, queryClient),
    queryKey,
  });
}
