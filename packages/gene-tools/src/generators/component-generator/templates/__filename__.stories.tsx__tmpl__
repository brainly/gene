<% if (shouldAddFlowDeclaration && flowDeclaration) { %>
  <%= flowDeclaration %>
<% } %>
import React from 'react';
import type { Meta, StoryObj } from '@storybook/react';
import {StorybookMediator} from '@brainly-gene/tools/storybook-utils';
<% if (storybookKnobs.length > 0) { %>import {<%= storybookKnobs.join(', ') %>} from '@storybook/addon-knobs';<% } %>
import <%= classify(name) %> from './<%= classify(name) %>';
<% if (events) { %>import {<%= eventsTypeName(name) %>} from './<%= eventsTypeName(name) %>';<% } %>

const EVENTS_LIST = [<% for (let event of eventsArray) { %>{
    value: <%= eventsTypeName(name) %>.<%= eventsKeyName(event) %>,
    description: 'Event runs on action: <%= classify(event) %>',
  },<% } %>];

const meta: Meta = {
  title: '<%= libraryShortName %>/<%= classify(name) %>',
  decorators: [
    (Story) => (
      <StorybookMediator events={EVENTS_LIST}>
        <Story />
      </StorybookMediator>
    ),
  ],
  parameters: {
    events: EVENTS_LIST,
  },
};

export default meta;
type Story = StoryObj<typeof meta>;

export const Default: Story = {
  render: () => (
    <<%= classify(name) %>
      <% if (props || copy) { %>
        <% if (copy) { %>
          copy={{<% for (let copyKey of copyArray) { %><%= camelize(copyKey) %>: <%- defaultStorybookInput(`copy${classify(copyKey)}`, 'string') %>,
        <% } %>}}<% } %>
      <% for (let [prop, propType] of propsArray) { %><%= camelize(prop) %>={<%- defaultStorybookInput(prop, propType) %>}
      <% } %>
    <% } %> />
  ),
};
